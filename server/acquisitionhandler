##  @package    communicationhandler
#   @author     David Schote <david.schote@ovgu.de>
#   @date       25.04.2020

# Imports
from PyQt5.QtCore import pyqtSignal
from server.communicationhandler import com
import numpy as np
import time

arr_data: np.ndarray
l_data: np.complex_64

class AcquisitionHandler:

    readoutFinished = pyqtSignal()

    def __init__(self, samples: int = 50000):
        self.samples: int = samples

    # Function to trigger acquisition and perform single readout
    def acquireSpectrum(self) -> [np.complex64, float]:
        global l_data

        t0: float = time.time()
        com.acquireSpectrum()
        com.waitForTransmission()

        buffer: bytearray = com.readData(self.samples)
        l_data: np.complex_64 = np.frombuffer(buffer, np.complex64)

        t1: float = time.time()
        acquisitiontime: float = (t1-t0)/60
        self.readoutFinished.emit()
        # connect this signal to process_readout(ts)
        # connect this signal to anaytics()

        return [l_data, acquisitiontime]

    # Function to acquire an image with multiple readouts
    def acquireImage(self, npe: int = 16, tr: int = 4000) -> [np.complex, float]:
        global arr_data
        arr_data: np.ndarray = np.array(np.zeros(npe, self.samples), ndmin=2, dtype=np.complex_64)

        t0: float = time.time()
        com.acquireImage(npe, tr)
        com.waitForTransmission()

        for n in range(npe):
            buffer: bytearray = com.readData(self.samples)
            arr_data[n, :] = np.frombuffer(buffer, np.complex_64)

        t1: float = time.time()
        acquisitiontime: float = (t1 - t0) / 60
        self.readoutFinished.emit()

        print('Finished image acquisition in {:.4f} min'.format((t1 - t0) / 60))

        return [arr_data, acquisitiontime]

    # Function to acquire 1D projection
    def acquireProjection(self, axis: int) -> [np.complex, float, int]:
        global l_data
        t0: float = time.time()
        com.acquireProjection(axis)
        com.waitForTransmission()

        buffer: bytearray = com.readData(self.samples)
        l_data: np.complex_64 = np.frombuffer(buffer, np.complex_64)

        t1: float = time.time()
        acquisitiontime: float = (t1 - t0) / 60
        self.readoutFinished.emit()

        return [l_data, acquisitiontime, axis]


acq: AcquisitionHandler = AcquisitionHandler()
